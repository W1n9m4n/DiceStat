<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Dice Detector Webapp</title>
  <style>
    body {
      font-family: sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 2rem;
      background: #f5f5f5;
    }
    video {
      border-radius: 12px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
      width: 100%;
      max-width: 480px;
    }
    .message {
      margin-top: 1rem;
      font-size: 1.2rem;
      font-weight: 500;
    }
    .error {
      color: red;
    }
    button {
      margin-top: 1rem;
      padding: 0.5rem 1rem;
      font-size: 1rem;
      border: none;
      border-radius: 8px;
      background-color: #007bff;
      color: white;
      cursor: pointer;
    }
    button:disabled {
      background-color: #aaa;
      cursor: not-allowed;
    }
  </style>
</head>
<body>
  <video id="video" autoplay playsinline muted></video>
  <canvas id="canvas" style="display: none;"></canvas>
  <button id="startBtn">Start Camera</button>
  <p id="message" class="message"></p>

  <script>
    const video = document.getElementById('video');
    const canvas = document.getElementById('canvas');
    const message = document.getElementById('message');
    const button = document.getElementById('startBtn');

    let streamStarted = false;

    async function startCamera() {
      message.textContent = '';
      button.disabled = true;

      if (location.protocol !== 'https:' && location.hostname !== 'localhost') {
        message.textContent = 'Camera access requires HTTPS or localhost.';
        message.classList.add('error');
        button.disabled = false;
        return;
      }

      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        message.textContent = 'Camera not supported in this browser.';
        message.classList.add('error');
        button.disabled = false;
        return;
      }

      try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } });
        video.srcObject = stream;
        streamStarted = true;
        message.textContent = 'Camera initialized successfully.';
        setInterval(detectDice, 1500);
      } catch (err) {
        console.error(err);
        message.textContent = err.name === 'NotAllowedError'
          ? 'Camera access denied. Please allow permission.'
          : 'Failed to access camera.';
        message.classList.add('error');
      }
      button.disabled = false;
    }

    function detectDice() {
      if (!streamStarted) return;
      const context = canvas.getContext('2d');
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      context.drawImage(video, 0, 0, canvas.width, canvas.height);

      const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
      let sum = 0;
      for (let i = 0; i < imageData.data.length; i += 4) {
        const r = imageData.data[i];
        const g = imageData.data[i + 1];
        const b = imageData.data[i + 2];
        sum += (r + g + b) / 3;
      }
      const avg = sum / (imageData.data.length / 4);
      message.textContent = avg > 100 ? 'Dice detected (simulated)' : 'No dice detected (simulated)';
    }

    button.addEventListener('click', startCamera);
  </script>
</body>
</html>
